# Copyright (c) 2022, Semiotic AI, Inc.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

image: python:3.8-slim

stages:
  - Static Analysis
  - Build
  - Test
  - Publish

black+isort:
  stage: Static Analysis
  allow_failure: false
  script:
    - pip install --pre "poetry==1.2.0b2"
    - poetry install -n --only=dev
    - poetry run black --check --diff --color .
    - poetry run isort --check --diff --profile black .

pylint:
  stage: Static Analysis
  script:
    - pip install --pre "poetry==1.2.0b2"
    - poetry install  -n --with=dev
    - mkdir -p pylint/badges pylint/lint
    - echo undefined > pylint/badges/$CI_JOB_NAME.score
    - poetry run pylint ./src/thegraph_gql_utils ./tests -j0 --exit-zero --output-format=text | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > pylint/badges/$CI_JOB_NAME.score
    - poetry run pylint ./src/thegraph_gql_utils ./tests -j0 --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter > codeclimate.json
    - poetry run pylint ./src/thegraph_gql_utils ./tests -j0 --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter > pylint/lint/index.html
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat pylint/badges/$CI_JOB_NAME.score) --file=pylint/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat pylint/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - pylint
    reports:
      codequality: codeclimate.json
    when: always

build_wheel:
  stage: Build
  script:
    - pip install --pre "poetry==1.2.0b2"
    - poetry self add poetry-dynamic-versioning
    - apt-get update && apt-get install -y --no-install-recommends git
    - poetry build -n -f wheel
  artifacts:
    paths:
      - dist
    untracked: false
    expire_in: 30 days

pytest:
  stage: Test
  script:
    - pip install --pre "poetry==1.2.0b2"
    - poetry config -n virtualenvs.create false
    - poetry install  -n --only=dev --no-root
    - pip install dist/*.whl
    - poetry run pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

publish:
  stage: Publish
  script:
    - pip install twine
    # Upload to gitlab packages
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=${CI_REGISTRY_USER} python -m twine upload --repository-url https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/thegraph_gql_utils-*-py3-none-any.whl
    # Upload to PyPI
    - cat $PYPIRC > /tmp/.pypirc
    - python -m twine upload dist/thegraph_gql_utils-*-py3-none-any.whl --config-file /tmp/.pypirc
  only:
    - tags@semiotic-ai/thegraph-gql-utils
  variables:
      GIT_STRATEGY: none
